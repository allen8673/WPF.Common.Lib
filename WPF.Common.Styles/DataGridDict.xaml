<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPF.Common.Styles">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WPF.Common.Styles;component/ResourceDict.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/WPF.Common.Styles;component/DefaultTheme.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <!--DataGridColumnHeader-->
    <Style x:Key="HeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#3E465D" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="0,0,-1,0"/>
    </Style>

    <!--DataGridRow-->
    <Style x:Key="RowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="White" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="40" />
        <Style.Triggers>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="#EEEEEE"/>
            </Trigger>
            <Trigger Property="DetailsVisibility" Value="Visible">
                <Setter Property="Background" Value="#C5E7FF"/>
                <Setter Property="TextElement.Foreground" Value="#145288"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#1279D1"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Focusable, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Self}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#C5E7FF"/>
                <Setter Property="TextElement.Foreground" Value="#145288"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!--DataGridCell-->
    <Style x:Key="CellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,-1,0"></Setter>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Foreground" Value="#646464" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="Visible">
                <Setter Property="Foreground" Value="#145288"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true">
                <Setter Property="Foreground" Value="#FFFFFF"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Focusable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true" />
                    <Condition Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#145288"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ImgCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource CellStyle}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
    </Style>

    <!--DataGrid-->
    <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MetroDataGrid}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ColumnWidth" Value="*"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="RowDetailsVisibilityMode" Value="Collapsed"/>
    </Style>

    <!--Other-->
    <Style x:Key="IconHidden" TargetType="{x:Type Border}" >
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Focusable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true" />
                    <Condition Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Hidden"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconVisible" TargetType="{x:Type Path}" >
        <Setter Property="Stroke" Value="#646464"/>
        <Setter Property="Data" Value="M0,0 L7.5,10 L15,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="Visible">
                <Setter Property="Data" Value="M0,10 L7.5,0 L15,10"/>
                <Setter Property="Stroke" Value="#646464"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true">
                <Setter Property="Stroke" Value="White"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Focusable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="true" />
                    <Condition Binding="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}}" Value="Visible" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Stroke" Value="#646464"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WrapTextCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource CellStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>

    </Style>

    <Style x:Key="WrapTextElementStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
    </Style>

    <ControlTemplate TargetType="HeaderedContentControl" x:Key="PopupButton">
        <Grid>
            <ToggleButton Content="{TemplateBinding Header}" x:Name="toggle" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border BorderBrush="Transparent" Background="Transparent" BorderThickness="0" Padding="4" x:Name="border">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter />
                                <Path Stroke="White" StrokeThickness="2" Data="M5,5 L10,10 L15,5"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ToggleButton.Template>
            </ToggleButton>
            <Popup PlacementTarget="{Binding ElementName=toggle}" IsOpen="{Binding IsChecked, ElementName=toggle}" Tag="{Binding Tag}" AllowsTransparency="True" StaysOpen="False">
                <Grid>
                    <Border Background="White" BorderBrush="Gray" BorderThickness="0" Padding="5" Margin="0,0,5,5">
                        <ContentPresenter />
                        <Border.Effect>
                            <DropShadowEffect Opacity=".25" />
                        </Border.Effect>
                    </Border>
                    <Rectangle Fill="White" Stroke="Transparent" StrokeThickness="1" Width="{Binding ActualWidth,ElementName=toggle}"
                                           Height="3" Margin=".5,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" />
                </Grid>
            </Popup>
        </Grid>
    </ControlTemplate>
</ResourceDictionary>